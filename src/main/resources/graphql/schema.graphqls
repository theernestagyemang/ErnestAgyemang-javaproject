type User {
    id: ID!
    name: String!
    email: String!
    password: String!
    role: String!
}

input UserInput {
    name: String!
    email: String!
    password: String!
    role: String!
}

input UserUpdateInput {
    id: ID!
    name: String!
    email: String!
    password: String!
    role: String!
}

type Product {
    id: ID!
    name: String!
    stock: Int!
    price: Float!
}

input ProductInput {
    name: String!
    stock: Int!
    price: Float!
}

input ProductUpdateInput {
    id: ID!
    name: String!
    stock: Int!
    price: Float!
}

type ProductLineList {
    id: ID!
    product: Product!
    quantity: Int!
    order: Order!
}

input ProductLineInput {
    productId: ID!
    quantity: Int!
}

input ProductLineUpdateInput {
    id: ID!
    productId: ID!
    quantity: Int!
}

type Order {
    id: ID!
    productLineList: [ProductLineList!]!
    user: User!
}

input OrderInput {
    productLineInputList: [ProductLineInput!]!
}

input OrderUpdateInput {
    id: ID!
    productLineInputList: [ProductLineUpdateInput!]!
}

type Query {
    getAllUsers: [User!]!
    getUserById(id: ID!): User
    getAllProducts: [Product!]!
    getProductById(id: ID!): Product
    getLowStockProducts(threshold: Int!): [Product!]!
    getProductsByOrder(id: ID!): [Product!]!
    getAllOrders: [Order!]!
    getOrderById(id: ID!): Order
    getAllOrdersByUser(userId: ID!): [Order!]!
}

type Mutation {
    createUser(userInput: UserInput!): User
    updateUser(userInput: UserUpdateInput!): User
    deleteUser(id: ID!): String
    createProduct(productInput: ProductInput!): Product
    updateProduct(productInput: ProductUpdateInput!): Product
    deleteProduct(id: ID!): String
    createOrder(orderInput: OrderInput!): Order
    updateOrder(orderInput: OrderUpdateInput!): Order
    deleteOrder(id: ID!): String
}



